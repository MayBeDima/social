{"version":3,"file":"static/js/842.39533f10.chunk.js","mappings":"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","sources":["webpack://my-app/./src/Layout/Login/login.module.css?1dc2","Layout/Login/Login.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"loginPage\":\"login_loginPage__5LRZf\",\"header\":\"login_header__wDdZ4\",\"errorForm\":\"login_errorForm__ZWfxl\",\"inputBox\":\"login_inputBox__Lq8bB\",\"input\":\"login_input__3zH6l\",\"error\":\"login_error__xIDef\",\"checkboxContainer\":\"login_checkboxContainer__saXAw\",\"checkbox\":\"login_checkbox__WyQyD\",\"label\":\"login_label__wzZZg\",\"btnSubmit\":\"login_btnSubmit__mDBj2\",\"errorMessage\":\"login_errorMessage__XpfRU\",\"passBtn\":\"login_passBtn__sqgnM\",\"captchaBox\":\"login_captchaBox__I3Rz6\",\"captchaImg\":\"login_captchaImg__PiFr1\"};","import React from 'react';\nimport styles from './login.module.css';\nimport { useForm } from 'react-hook-form';\nimport classNames from 'classnames';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { login } from '../../redux/authReducer';\nimport { Navigate } from 'react-router-dom';\nimport { selectCaptchaUrl, selectIsAuth } from '../../redux/authSelectors';\nimport { useState } from 'react';\nimport hideImg from '../../../src/assets/images/hidePass.png';\nimport showImg from '../../../src/assets/images/showPass.png';\n\nexport default function Login(props) {\n\n  const [visible, setVisible] = useState(false);\n\n  const dispatch = useDispatch();\n  const isAuth = useSelector(selectIsAuth);\n  const captchaUrl = useSelector(selectCaptchaUrl);\n\n  const {\n    clearErrors,\n    setError,\n    register,\n    handleSubmit,\n    formState: { errors, isValid }\n  } = useForm({\n    mode: 'onChange',\n  });\n\n  const onSubmit = (data => {\n    dispatch(login(data.email, data.password, data.rememberMe, data.captcha, setError));\n\n    console.log(data);\n  })\n\n  if (isAuth) {\n    return <Navigate to='/profile' />\n  }\n\n\n\n  return (\n    <div className={styles.loginPage}>\n      <h1 className={styles.header}>Login</h1>\n\n      <form onSubmit={handleSubmit(onSubmit)}\n        onChange={() => {\n          clearErrors('serverError');\n        }\n        }\n      >\n        <div className={styles.inputBox}>\n          <input\n            className={!errors.email\n              ? styles.input\n              : classNames(styles.input, styles.error)}\n            type='text'\n            name='email'\n            placeholder='email'\n            {...register('email',\n              {\n                required: 'This field is required',\n                pattern: {\n                  value: /^([a-z0-9_-]+\\.)*[a-z0-9_-]+@[a-z0-9_-]+(\\.[a-z0-9_-]+)*\\.[a-z]{2,6}$/,\n                  message: \"Please enter a valid email address\"\n                }\n              })}\n          />\n          {errors.email && <div className={styles.errorMessage}>{errors.email.message}</div>}\n        </div>\n\n        <div className={styles.inputBox}>\n          <input\n            className={!errors.password\n              ? styles.input\n              : classNames(styles.input, styles.error)}\n            type={visible ? 'text' : 'password'}\n            name='password'\n            placeholder='password'\n            {...register('password',\n              {\n                required: 'This field is required',\n                minLength: {\n                  value: 4,\n                  message: 'Please enter at least 4 characters'\n                },\n                maxLength: {\n                  value: 15,\n                  message: 'Please enter at most 15 characters'\n                }\n              })}\n          />\n          <button\n            className={styles.passBtn}\n            type='button'\n            onClick={() => {\n              visible ? setVisible(false) : setVisible(true)\n            }}>\n            <img src={visible ? hideImg : showImg} alt=\"icon\" />\n          </button>\n          {errors.password && <div className={styles.errorMessage}>{errors.password.message}</div>}\n        </div>\n\n        <div className={classNames(styles.inputBox, styles.checkboxContainer)}>\n          <input\n            name='rememberMe'\n            type='checkbox'\n            {...register('rememberMe')}\n            className={styles.checkbox}\n          />\n          <label className={styles.label} htmlFor='rememberMe'>Remember me</label>\n        </div>\n\n        <div>\n          <input\n            className={styles.btnSubmit}\n            type='submit'\n            value='Submit'\n            disabled={!isValid}\n          />\n        </div>\n\n        {captchaUrl && (\n          <div className={styles.captchaBox}>\n            <div className={styles.inputBox}>\n              <input\n                type='text'\n                name='captcha'\n                {...register('captcha',\n                  {\n                    required: 'This field is required',\n                  }\n                )}\n                placeholder='captcha'\n              />\n              {errors.captcha && <div className={styles.errorMessage}>{errors.captcha.message}</div>}\n            </div>\n            <img className={styles.captchaImg} src={captchaUrl} alt='captcha'></img>\n          </div>\n        )}\n      </form>\n      {errors.serverError && <div className={styles.errorForm}>{errors.serverError.message}</div>}\n\n    </div >\n  );\n}\n"],"names":["Login","props","_useState","useState","_useState2","_slicedToArray","visible","setVisible","dispatch","useDispatch","isAuth","useSelector","selectIsAuth","captchaUrl","selectCaptchaUrl","_useForm","useForm","mode","clearErrors","setError","register","handleSubmit","_useForm$formState","formState","errors","isValid","_jsx","Navigate","to","_jsxs","className","styles","children","onSubmit","data","login","email","password","rememberMe","captcha","console","log","onChange","_objectSpread","classNames","type","name","placeholder","required","pattern","value","message","minLength","maxLength","onClick","src","hideImg","showImg","alt","htmlFor","disabled","serverError"],"sourceRoot":""}